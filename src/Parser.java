
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 06 15:12:26 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.Vector;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 06 15:12:26 CET 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\010\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\003\007" +
    "\000\002\003\005\000\002\003\006\000\002\003\006\000" +
    "\002\003\007\000\002\003\007\000\002\003\011\000\002" +
    "\003\010\000\002\003\006\000\002\003\007\000\002\003" +
    "\011\000\002\003\004\000\002\003\004\000\002\006\011" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\002\000\002\007\005\000\002\012\010\000\002" +
    "\012\002\000\002\015\007\000\002\014\007\000\002\013" +
    "\004\000\002\013\004\000\002\013\002\000\002\004\003" +
    "\000\002\004\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\036\002\ufffc\026\015\035\023\036\016\037" +
    "\012\040\030\041\022\042\007\043\025\044\021\046\017" +
    "\047\013\051\011\060\024\001\002\000\004\002\215\001" +
    "\002\000\036\002\ufffc\026\015\035\023\036\016\037\012" +
    "\040\030\041\022\042\007\043\025\044\021\046\017\047" +
    "\013\051\011\060\024\001\002\000\004\025\213\001\002" +
    "\000\004\060\uffc1\001\002\000\004\060\156\001\002\000" +
    "\004\004\150\001\002\000\004\060\uffc4\001\002\000\006" +
    "\050\051\054\uffce\001\002\000\004\025\047\001\002\000" +
    "\004\057\043\001\002\000\004\060\uffc5\001\002\000\004" +
    "\060\uffbe\001\002\000\036\002\ufffc\026\015\035\023\036" +
    "\016\037\012\040\030\041\022\042\007\043\025\044\021" +
    "\046\017\047\013\051\011\060\024\001\002\000\004\060" +
    "\uffbf\001\002\000\004\060\uffc2\001\002\000\004\060\uffc6" +
    "\001\002\000\004\016\032\001\002\000\004\060\uffc0\001" +
    "\002\000\036\002\ufffc\026\015\035\023\036\016\037\012" +
    "\040\030\041\022\042\007\043\025\044\021\046\017\047" +
    "\013\051\011\060\024\001\002\000\004\002\000\001\002" +
    "\000\004\060\uffc3\001\002\000\004\002\ufffd\001\002\000" +
    "\010\045\035\057\034\060\033\001\002\000\004\025\041" +
    "\001\002\000\004\025\040\001\002\000\004\060\036\001" +
    "\002\000\004\025\037\001\002\000\044\002\uffd9\026\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9" +
    "\054\uffd9\060\uffd9\001\002\000\044\002\uffdf\026\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054" +
    "\uffdf\060\uffdf\001\002\000\044\002\uffe0\026\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0" +
    "\060\uffe0\001\002\000\004\002\uffff\001\002\000\004\030" +
    "\044\001\002\000\004\057\045\001\002\000\004\027\046" +
    "\001\002\000\004\025\uffcc\001\002\000\044\002\uffd6\026" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\053" +
    "\uffd6\054\uffd6\060\uffd6\001\002\000\004\054\147\001\002" +
    "\000\004\004\052\001\002\000\020\004\060\007\053\013" +
    "\064\055\057\056\061\057\056\060\062\001\002\000\010" +
    "\007\053\057\056\060\062\001\002\000\024\005\135\014" +
    "\067\015\074\017\071\020\073\021\072\022\070\023\066" +
    "\024\075\001\002\000\036\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\001\002\000\036\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\014\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\001\002\000\024\005\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002\000" +
    "\020\004\060\007\053\013\064\055\057\056\061\057\056" +
    "\060\062\001\002\000\024\005\uffea\014\uffea\015\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\001\002" +
    "\000\040\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\045\132\001\002\000\026\006\111\007" +
    "\106\010\115\011\107\017\110\020\113\021\112\022\116" +
    "\023\114\024\117\001\002\000\020\004\060\007\053\013" +
    "\064\055\057\056\061\057\056\060\062\001\002\000\024" +
    "\005\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\001\002\000\020\004\060\007\053" +
    "\013\064\055\057\056\061\057\056\060\062\001\002\000" +
    "\020\004\060\007\053\013\064\055\057\056\061\057\056" +
    "\060\062\001\002\000\020\004\060\007\053\013\064\055" +
    "\057\056\061\057\056\060\062\001\002\000\020\004\060" +
    "\007\053\013\064\055\057\056\061\057\056\060\062\001" +
    "\002\000\020\004\060\007\053\013\064\055\057\056\061" +
    "\057\056\060\062\001\002\000\020\004\060\007\053\013" +
    "\064\055\057\056\061\057\056\060\062\001\002\000\020" +
    "\004\060\007\053\013\064\055\057\056\061\057\056\060" +
    "\062\001\002\000\020\004\060\007\053\013\064\055\057" +
    "\056\061\057\056\060\062\001\002\000\024\005\ufff4\014" +
    "\067\015\074\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\001\002\000\024\005\ufffa\014\ufffa\015\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\001\002" +
    "\000\024\005\ufff7\014\067\015\074\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\001\002\000\024\005\uffef" +
    "\014\067\015\074\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\001\002\000\024\005\ufff9\014\067\015\074" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\001" +
    "\002\000\024\005\ufff1\014\067\015\074\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\001\002\000\024\005" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\001\002\000\024\005\ufff3\014\067\015" +
    "\074\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\001\002\000\010\007\053\057\056\060\062\001\002\000" +
    "\010\007\053\057\056\060\062\001\002\000\010\007\053" +
    "\057\056\060\062\001\002\000\010\007\053\057\056\060" +
    "\062\001\002\000\010\007\053\057\056\060\062\001\002" +
    "\000\010\007\053\057\056\060\062\001\002\000\010\007" +
    "\053\057\056\060\062\001\002\000\010\007\053\057\056" +
    "\060\062\001\002\000\010\007\053\057\056\060\062\001" +
    "\002\000\010\007\053\057\056\060\062\001\002\000\034" +
    "\005\ufff5\006\111\007\106\010\115\011\107\014\ufff5\015" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\001\002\000\034\005\ufff0\006\111\007\106\010\115\011" +
    "\107\014\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\001\002\000\036\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\001\002\000" +
    "\034\005\ufff2\006\111\007\106\010\115\011\107\014\ufff2" +
    "\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\001\002\000\034\005\ufff6\006\111\007\106\010\115" +
    "\011\107\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\001\002\000\034\005\uffee\006\111" +
    "\007\106\010\115\011\107\014\uffee\015\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\001\002\000\036" +
    "\005\uffe9\006\uffe9\007\uffe9\010\115\011\107\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\001\002\000\034\005\ufff8\006\111\007\106\010" +
    "\115\011\107\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\001\002\000\036\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\001" +
    "\002\000\036\005\uffe8\006\uffe8\007\uffe8\010\115\011\107" +
    "\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\001\002\000\036\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\014\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\001\002" +
    "\000\024\005\134\014\067\015\074\017\071\020\073\021" +
    "\072\022\070\023\066\024\075\001\002\000\024\005\uffed" +
    "\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\001\002\000\040\026\015\035\023\036\016" +
    "\037\012\040\030\041\022\042\007\043\025\044\021\046" +
    "\017\047\013\050\uffd1\051\011\054\uffd1\060\024\001\002" +
    "\000\006\050\051\054\uffce\001\002\000\042\026\015\035" +
    "\023\036\016\037\012\040\030\041\022\042\007\043\025" +
    "\044\021\046\017\047\013\050\uffd1\051\011\053\uffd1\054" +
    "\uffd1\060\024\001\002\000\042\026\015\035\023\036\016" +
    "\037\012\040\030\041\022\042\007\043\025\044\021\046" +
    "\017\047\013\050\uffd1\051\011\053\uffd1\054\uffd1\060\024" +
    "\001\002\000\042\026\015\035\023\036\016\037\012\040" +
    "\030\041\022\042\007\043\025\044\021\046\017\047\013" +
    "\050\uffd1\051\011\053\uffd1\054\uffd1\060\024\001\002\000" +
    "\010\050\uffd2\053\uffd2\054\uffd2\001\002\000\010\050\uffd4" +
    "\053\uffd4\054\uffd4\001\002\000\010\050\uffd3\053\uffd3\054" +
    "\uffd3\001\002\000\004\054\uffcf\001\002\000\036\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\015\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\001\002\000\044\002\uffd0\026\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0\060\uffd0\001" +
    "\002\000\020\004\060\007\053\013\064\055\057\056\061" +
    "\057\056\060\062\001\002\000\024\005\152\014\067\015" +
    "\074\017\071\020\073\021\072\022\070\023\066\024\075" +
    "\001\002\000\004\052\153\001\002\000\036\026\015\035" +
    "\023\036\016\037\012\040\030\041\022\042\007\043\025" +
    "\044\021\046\017\047\013\051\011\053\uffd1\060\024\001" +
    "\002\000\004\053\155\001\002\000\044\002\uffd5\026\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\054\uffd5\060\uffd5\001\002\000\012\016\157\025\160\026" +
    "\162\045\161\001\002\000\022\004\167\007\053\032\172" +
    "\045\170\055\166\056\171\057\056\060\062\001\002\000" +
    "\044\002\uffe1\026\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\053\uffe1\054\uffe1\060\uffe1\001\002\000\004" +
    "\025\165\001\002\000\004\057\163\001\002\000\004\027" +
    "\164\001\002\000\004\025\uffcd\001\002\000\044\002\uffda" +
    "\026\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\053\uffda\054\uffda\060\uffda\001\002\000\004\025\212\001" +
    "\002\000\010\005\uffc9\031\203\057\204\001\002\000\004" +
    "\060\201\001\002\000\004\025\200\001\002\000\004\060" +
    "\175\001\002\000\014\006\111\007\106\010\115\011\107" +
    "\025\174\001\002\000\044\002\uffe2\026\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\060" +
    "\uffe2\001\002\000\004\032\176\001\002\000\004\025\177" +
    "\001\002\000\044\002\uffdc\026\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\060\uffdc\001" +
    "\002\000\044\002\uffdd\026\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\060\uffdd\001\002" +
    "\000\004\025\202\001\002\000\044\002\uffdb\026\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\060\uffdb\001\002\000\010\005\uffc9\031\203\057\204" +
    "\001\002\000\010\005\uffc9\031\203\057\204\001\002\000" +
    "\004\005\206\001\002\000\004\025\207\001\002\000\044" +
    "\002\uffd8\026\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\053\uffd8\054\uffd8\060\uffd8\001\002\000\004\005" +
    "\uffcb\001\002\000\004\005\uffca\001\002\000\044\002\uffde" +
    "\026\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\053\uffde\054\uffde\060\uffde\001\002\000\044\002\uffd7\026" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053" +
    "\uffd7\054\uffd7\060\uffd7\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\022\002\026\003\017\006\025\007\004\010" +
    "\003\014\005\015\013\017\007\001\001\000\002\001\001" +
    "\000\020\002\213\003\017\006\025\007\004\014\005\015" +
    "\013\017\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\041\003" +
    "\017\006\025\007\004\014\005\015\013\017\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\030\003\017" +
    "\006\025\007\004\014\005\015\013\017\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\054\005\062\016\053\001\001\000\006\004\054\005\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\054\005\062\016\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\054\005\062\016\064\001\001\000\002" +
    "\001\001\000\010\004\054\005\062\016\104\001\001\000" +
    "\010\004\054\005\062\016\103\001\001\000\010\004\054" +
    "\005\062\016\102\001\001\000\010\004\054\005\062\016" +
    "\101\001\001\000\010\004\054\005\062\016\100\001\001" +
    "\000\010\004\054\005\062\016\077\001\001\000\010\004" +
    "\054\005\062\016\076\001\001\000\010\004\054\005\062" +
    "\016\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\054\005\130\001\001\000\006\004\054\005\127\001\001" +
    "\000\006\004\054\005\126\001\001\000\006\004\054\005" +
    "\125\001\001\000\006\004\054\005\124\001\001\000\006" +
    "\004\054\005\123\001\001\000\006\004\054\005\122\001" +
    "\001\000\006\004\054\005\121\001\001\000\006\004\054" +
    "\005\120\001\001\000\006\004\054\005\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\137\006\140\007\136\011\135\014\005\015\013" +
    "\017\007\001\001\000\004\012\144\001\001\000\020\003" +
    "\137\006\140\007\136\011\143\014\005\015\013\017\007" +
    "\001\001\000\020\003\137\006\140\007\136\011\142\014" +
    "\005\015\013\017\007\001\001\000\020\003\137\006\140" +
    "\007\136\011\141\014\005\015\013\017\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\054\005\062\016\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\137\006\140\007\136\011\153\014" +
    "\005\015\013\017\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\054\005\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\210\001\001\000\004\013\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(String message, Object o, int line, int column){
	String msg2 = new StringBuilder().append("ligne : ").append(line+1).append(",").append(column)
					.append(",\t erreur : ").append(message)
					.append("\n\t-> symbole : ").append(o).toString();
	report_error(msg2, null) ;
}
public void syntax_error(String message, Object o){
	String msg2 = new StringBuilder().append("objet : ").append(o).append(" ->\t ").append(message).toString();
	report_error(msg2, null) ;
}
public void unrecovered_syntax_error(Symbol cur_token, String message){
	try{
		report_fatal_error(message, null) ;
	}catch (Exception e){
		
	}
}
public void unrecovered_syntax_error(Symbol cur_token){
	try{
		report_fatal_error("Erreur fatale", null) ;
	}catch (Exception e){
		
	}
}

public Tree tree = new Tree();
public  ArrayList<Node> caseArray = new ArrayList<Node>();
public SymboleTable symboleTable = new SymboleTable();


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= STRING 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= ENUM 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.ENUM; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= REAL 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.REAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= CHAR 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.CHARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= BOOL 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= UBIGINTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.UBIGINTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= UINTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.UINTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= BIGINTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.BIGINTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= INTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // val ::= STRINGCONTENT 
            {
              Node RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeConstant(val2, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // val ::= NUMBER 
            {
              Node RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeConstant(val1, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // enumeration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // enumeration ::= COMA enumeration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // enumeration ::= NUMBER enumeration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // intervals ::= LBRACKET NUMBER DOTDOT NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intervals",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array ::= type STRINGCONTENT LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cases ::= 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList<Node>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cases ::= CASE LPAR prop RPAR instructions cases 
            {
              ArrayList<Node> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Node> i = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Node> c = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			c.add(new NodeCase(p, i));
			RESULT = c;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // switchCase ::= SWITCH cases END_SWITCH 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Node> c = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new NodeSwitch(c);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchCase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instructions ::= 
            {
              ArrayList<Node> RESULT =null;
		 
			RESULT = new ArrayList<Node>(); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instructions ::= loop instructions 
            {
              ArrayList<Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Node> i = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			i.add(l); 
			RESULT = i;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instructions ::= switchCase instructions 
            {
              ArrayList<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Node> i = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			i.add(s); 
			RESULT = i;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instructions ::= variable instructions 
            {
              ArrayList<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Node> i = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			i.add(v); 
			RESULT = i;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // loop ::= WHILE LPAR prop RPAR DO instructions OD 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Node> i = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new NodeWhile(p, i);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= array SEMIC 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable ::= intervals SEMIC 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= type STRINGCONTENT EQ LPAR enumeration RPAR SEMIC 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= STRINGCONTENT EQ ARROW STRINGCONTENT SEMIC 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			if(parser.symboleTable.exist(name)){
				RESULT = new NodePointer(null, name, val); 
	    	}
	    	else
	    		RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= type STRINGCONTENT ARROW SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			if(!parser.symboleTable.exist(name)){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodePointer(t, name, null); 
	    	}
	    	else
	    		RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= type STRINGCONTENT EQ ARROW STRINGCONTENT SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			if(!parser.symboleTable.exist(name) && parser.symboleTable.exist(val) ){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodePointer(t, name, val); 
	    	}
	    	else
	    		RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= type STRINGCONTENT EQ QUOTE STRINGCONTENT QUOTE SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
			if(!parser.symboleTable.exist(name)){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodeVariable(t, name, val, null);
	    	}
	    	else
	    		RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= type STRINGCONTENT EQ FALSE SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	
			if(!parser.symboleTable.exist(name)){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodeVariable(t, name, val, null);
	    	}
	    	else
	    		RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable ::= type STRINGCONTENT EQ TRUE SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			if(!parser.symboleTable.exist(name)){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodeVariable(t, name, val, null);
	    	}
	    	else
	    		RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable ::= STRINGCONTENT EQ NUMBER SEMIC 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	
			if(parser.symboleTable.exist(name)){
				RESULT = new NodeVariable(null, name, val, null); 
			}
			else
				RESULT = new NodeError(EnumTac.VAR_UNDECLARED, name, nameleft+1, nameright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= STRINGCONTENT EQ STRINGCONTENT SEMIC 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			
			if(parser.symboleTable.exist(name) && parser.symboleTable.exist(val)){
				RESULT = new NodeVariable(null, name, val, null); 
			}
			else{
				RESULT = new NodeError(EnumTac.VAR_UNDECLARED, name, nameleft+1, nameright);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable ::= type STRINGCONTENT SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			if(!parser.symboleTable.exist(name)){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodeVariable(t, name, null, null); 
			}
			else
				RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable ::= type STRINGCONTENT EQ expr SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			if(!parser.symboleTable.exist(name)){
				parser.symboleTable.addVariable(t, name);
				RESULT = new NodeVariable(t, name, val.getValue(), val);
			}
			else
				RESULT = new NodeError(EnumTac.VAR_ALREADY_DEF, name, nameleft+1, nameright);

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= STRINGCONTENT ARROW 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodePointer(null, v, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= val 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= MINUS expr 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DIVIDE expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.DIVIDE, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr TIMES expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.TIMES, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr MINUS expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.MINUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr PLUS expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.PLUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // prop ::= FALSE 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NodeConstant(f.toString(), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prop ::= TRUE 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NodeConstant(t.toString(), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prop ::= NOT prop 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.NOT, p, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prop ::= LPAR prop RPAR 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prop ::= expr EQUAL_INF expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL_INF, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prop ::= prop EQUAL_INF prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL_INF, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prop ::= expr EQUAL_SUP expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL_SUP, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prop ::= prop EQUAL_SUP prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL_SUP, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prop ::= expr INF expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.INF, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prop ::= prop INF prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.INF, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prop ::= prop SUP prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.SUP, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // prop ::= expr SUP expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.SUP, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // prop ::= expr EQUAL_NOT expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL_NOT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prop ::= prop EQUAL_NOT prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL_NOT, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prop ::= expr EQUAL expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prop ::= prop EQUAL prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.EQUAL, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prop ::= prop OR prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.OR, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prop ::= prop AND prop 
            {
              Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArithmetic(MyEnumType.AND, p1, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // begin ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // begin ::= loop begin 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Tree.node.add(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin ::= switchCase begin 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Tree.node.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= variable begin 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Tree.node.add(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begining ::= begin 
            {
              Tree RESULT =null;
		
		System.out.println(parser.tree.TacToString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begining",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begining EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree start_val = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

