
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 27 16:51:41 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 27 16:51:41 CET 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\005\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\004\005\000\002" +
    "\004\004\000\002\003\007\000\002\003\005\000\002\003" +
    "\006\000\002\003\007\000\002\003\007\000\002\003\011" +
    "\000\002\003\004\000\002\003\004\000\002\003\007\000" +
    "\002\014\011\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\002\000\002\013\005\000\002\015" +
    "\010\000\002\015\002\000\002\011\007\000\002\010\007" +
    "\000\002\007\004\000\002\007\004\000\002\007\002\000" +
    "\002\006\003\000\002\006\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\036\002\ufffc\026\015\035\023\036\016\037" +
    "\012\040\030\041\022\042\007\043\025\044\021\046\017" +
    "\047\013\051\011\060\024\001\002\000\004\002\171\001" +
    "\002\000\036\002\ufffc\026\015\035\023\036\016\037\012" +
    "\040\030\041\022\042\007\043\025\044\021\046\017\047" +
    "\013\051\011\060\024\001\002\000\004\025\167\001\002" +
    "\000\004\060\uffca\001\002\000\004\060\141\001\002\000" +
    "\004\004\133\001\002\000\004\060\uffcd\001\002\000\006" +
    "\050\044\054\uffd7\001\002\000\004\025\042\001\002\000" +
    "\004\057\036\001\002\000\004\060\uffce\001\002\000\004" +
    "\060\uffc7\001\002\000\036\002\ufffc\026\015\035\023\036" +
    "\016\037\012\040\030\041\022\042\007\043\025\044\021" +
    "\046\017\047\013\051\011\060\024\001\002\000\004\060" +
    "\uffc8\001\002\000\004\060\uffcb\001\002\000\004\060\uffcf" +
    "\001\002\000\004\016\032\001\002\000\004\060\uffc9\001" +
    "\002\000\036\002\ufffc\026\015\035\023\036\016\037\012" +
    "\040\030\041\022\042\007\043\025\044\021\046\017\047" +
    "\013\051\011\060\024\001\002\000\004\002\000\001\002" +
    "\000\004\060\uffcc\001\002\000\004\002\ufffd\001\002\000" +
    "\004\060\033\001\002\000\004\025\034\001\002\000\044" +
    "\002\uffe5\026\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\053\uffe5\054\uffe5\060\uffe5\001\002\000\004\002" +
    "\uffff\001\002\000\004\030\037\001\002\000\004\057\040" +
    "\001\002\000\004\027\041\001\002\000\004\025\uffd5\001" +
    "\002\000\044\002\uffe0\026\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0\060\uffe0\001\002" +
    "\000\004\054\132\001\002\000\004\004\045\001\002\000" +
    "\016\004\052\013\056\055\051\056\053\057\050\060\054" +
    "\001\002\000\024\005\121\014\061\015\066\017\063\020" +
    "\065\021\064\022\062\023\060\024\067\001\002\000\006" +
    "\057\050\060\054\001\002\000\010\025\uffd1\057\uffd1\060" +
    "\uffd1\001\002\000\024\005\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002\000" +
    "\016\004\052\013\056\055\051\056\053\057\050\060\054" +
    "\001\002\000\024\005\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\001\002\000\010" +
    "\025\uffd0\057\uffd0\060\uffd0\001\002\000\020\006\102\017" +
    "\103\020\105\021\104\022\101\023\100\024\106\001\002" +
    "\000\016\004\052\013\056\055\051\056\053\057\050\060" +
    "\054\001\002\000\024\005\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\001\002\000" +
    "\016\004\052\013\056\055\051\056\053\057\050\060\054" +
    "\001\002\000\016\004\052\013\056\055\051\056\053\057" +
    "\050\060\054\001\002\000\016\004\052\013\056\055\051" +
    "\056\053\057\050\060\054\001\002\000\016\004\052\013" +
    "\056\055\051\056\053\057\050\060\054\001\002\000\016" +
    "\004\052\013\056\055\051\056\053\057\050\060\054\001" +
    "\002\000\016\004\052\013\056\055\051\056\053\057\050" +
    "\060\054\001\002\000\016\004\052\013\056\055\051\056" +
    "\053\057\050\060\054\001\002\000\016\004\052\013\056" +
    "\055\051\056\053\057\050\060\054\001\002\000\024\005" +
    "\ufff4\014\061\015\066\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\001\002\000\024\005\ufffa\014\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\001\002\000\024\005\ufff7\014\061\015\066\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\001\002\000\024" +
    "\005\uffef\014\061\015\066\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\001\002\000\024\005\ufff9\014\061" +
    "\015\066\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\001\002\000\024\005\ufff1\014\061\015\066\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\001\002\000" +
    "\024\005\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\001\002\000\024\005\ufff3\014" +
    "\061\015\066\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\001\002\000\006\057\050\060\054\001\002\000" +
    "\006\057\050\060\054\001\002\000\006\057\050\060\054" +
    "\001\002\000\006\057\050\060\054\001\002\000\006\057" +
    "\050\060\054\001\002\000\006\057\050\060\054\001\002" +
    "\000\006\057\050\060\054\001\002\000\026\005\ufff5\006" +
    "\102\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\001\002\000\026\005\ufff6\006\102\014" +
    "\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\001\002\000\026\005\uffee\006\102\014\uffee\015" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\001\002\000\026\005\ufff8\006\102\014\ufff8\015\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\001\002" +
    "\000\030\005\uffe9\006\uffe9\014\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\001\002" +
    "\000\026\005\ufff0\006\102\014\ufff0\015\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\001\002\000\026" +
    "\005\ufff2\006\102\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\001\002\000\024\005\117" +
    "\014\061\015\066\017\063\020\065\021\064\022\062\023" +
    "\060\024\067\001\002\000\024\005\uffed\014\uffed\015\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\001" +
    "\002\000\030\005\uffe8\006\102\014\uffe8\015\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\001" +
    "\002\000\040\026\015\035\023\036\016\037\012\040\030" +
    "\041\022\042\007\043\025\044\021\046\017\047\013\050" +
    "\uffda\051\011\054\uffda\060\024\001\002\000\006\050\044" +
    "\054\uffd7\001\002\000\042\026\015\035\023\036\016\037" +
    "\012\040\030\041\022\042\007\043\025\044\021\046\017" +
    "\047\013\050\uffda\051\011\053\uffda\054\uffda\060\024\001" +
    "\002\000\042\026\015\035\023\036\016\037\012\040\030" +
    "\041\022\042\007\043\025\044\021\046\017\047\013\050" +
    "\uffda\051\011\053\uffda\054\uffda\060\024\001\002\000\042" +
    "\026\015\035\023\036\016\037\012\040\030\041\022\042" +
    "\007\043\025\044\021\046\017\047\013\050\uffda\051\011" +
    "\053\uffda\054\uffda\060\024\001\002\000\010\050\uffdb\053" +
    "\uffdb\054\uffdb\001\002\000\010\050\uffdd\053\uffdd\054\uffdd" +
    "\001\002\000\010\050\uffdc\053\uffdc\054\uffdc\001\002\000" +
    "\004\054\uffd8\001\002\000\044\002\uffd9\026\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9" +
    "\060\uffd9\001\002\000\016\004\052\013\056\055\051\056" +
    "\053\057\050\060\054\001\002\000\024\005\135\014\061" +
    "\015\066\017\063\020\065\021\064\022\062\023\060\024" +
    "\067\001\002\000\004\052\136\001\002\000\036\026\015" +
    "\035\023\036\016\037\012\040\030\041\022\042\007\043" +
    "\025\044\021\046\017\047\013\051\011\053\uffda\060\024" +
    "\001\002\000\004\053\140\001\002\000\044\002\uffde\026" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053" +
    "\uffde\054\uffde\060\uffde\001\002\000\010\016\142\025\143" +
    "\026\144\001\002\000\014\004\150\055\147\056\151\057" +
    "\050\060\054\001\002\000\044\002\uffe6\026\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6\054\uffe6" +
    "\060\uffe6\001\002\000\004\057\145\001\002\000\004\027" +
    "\146\001\002\000\004\025\uffd6\001\002\000\004\025\166" +
    "\001\002\000\010\005\uffd2\031\157\057\160\001\002\000" +
    "\004\025\156\001\002\000\006\006\102\025\155\001\002" +
    "\000\010\025\154\057\050\060\054\001\002\000\044\002" +
    "\uffe7\026\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\060\uffe7\001\002\000\044\002\uffdf" +
    "\026\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\053\uffdf\054\uffdf\060\uffdf\001\002\000\044\002\uffe3\026" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053" +
    "\uffe3\054\uffe3\060\uffe3\001\002\000\010\005\uffd2\031\157" +
    "\057\160\001\002\000\010\005\uffd2\031\157\057\160\001" +
    "\002\000\004\005\162\001\002\000\004\025\163\001\002" +
    "\000\044\002\uffe2\026\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\053\uffe2\054\uffe2\060\uffe2\001\002\000" +
    "\004\005\uffd4\001\002\000\004\005\uffd3\001\002\000\044" +
    "\002\uffe4\026\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\053\uffe4\054\uffe4\060\uffe4\001\002\000\044\002" +
    "\uffe1\026\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\053\uffe1\054\uffe1\060\uffe1\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\022\002\026\003\017\005\003\010\005\011" +
    "\013\013\004\014\025\017\007\001\001\000\002\001\001" +
    "\000\020\002\167\003\017\010\005\011\013\013\004\014" +
    "\025\017\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\034\003" +
    "\017\010\005\011\013\013\004\014\025\017\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\030\003\017" +
    "\010\005\011\013\013\004\014\025\017\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\054\006\046\016\045\001\001" +
    "\000\002\001\001\000\006\004\117\006\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\054\006\046" +
    "\016\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\054\006\046\016\056\001\001" +
    "\000\002\001\001\000\010\004\054\006\046\016\076\001" +
    "\001\000\010\004\054\006\046\016\075\001\001\000\010" +
    "\004\054\006\046\016\074\001\001\000\010\004\054\006" +
    "\046\016\073\001\001\000\010\004\054\006\046\016\072" +
    "\001\001\000\010\004\054\006\046\016\071\001\001\000" +
    "\010\004\054\006\046\016\070\001\001\000\010\004\054" +
    "\006\046\016\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\114\006\046\001\001\000\006\004\113\006\046" +
    "\001\001\000\006\004\112\006\046\001\001\000\006\004" +
    "\111\006\046\001\001\000\006\004\110\006\046\001\001" +
    "\000\006\004\107\006\046\001\001\000\006\004\106\006" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\123\010\005\011\013\012" +
    "\121\013\122\014\124\017\007\001\001\000\004\015\130" +
    "\001\001\000\020\003\123\010\005\011\013\012\127\013" +
    "\122\014\124\017\007\001\001\000\020\003\123\010\005" +
    "\011\013\012\126\013\122\014\124\017\007\001\001\000" +
    "\020\003\123\010\005\011\013\012\125\013\122\014\124" +
    "\017\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\054\006\046\016\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\123\010\005\011\013\012\136" +
    "\013\122\014\124\017\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\151\006\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\117\006\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\164\001\001\000\004\007" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(String message, Object o, int line, int column){
	String msg2 = new StringBuilder().append("ligne : ").append(line+1).append(",").append(column)
					.append(",\t erreur : ").append(message)
					.append("\n\t-> symbole : ").append(o).toString();
	report_error(msg2, null) ;
}
public void syntax_error(String message, Object o){
	String msg2 = new StringBuilder().append("objet : ").append(o).append(" ->\t ").append(message).toString();
	report_error(msg2, null) ;
}
public void unrecovered_syntax_error(Symbol cur_token, String message){
	try{
		report_fatal_error(message, null) ;
	}catch (Exception e){
		
	}
}
public void unrecovered_syntax_error(Symbol cur_token){
	try{
		report_fatal_error("Erreur fatale", null) ;
	}catch (Exception e){
		
	}
}

public Tree tree = new Tree();


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= STRING 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ENUM 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.ENUM; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= REAL 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.REAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CHAR 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.CHARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= BOOL 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= UBIGINTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.UBIGINTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= UINTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.UINTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= BIGINTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.BIGINTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= INTEGER 
            {
              MyEnumType RESULT =null;
		 RESULT = MyEnumType.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // val ::= STRINGCONTENT 
            {
              String RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("val",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // val ::= NUMBER 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("val",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // enumeration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // enumeration ::= COMA enumeration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // enumeration ::= NUMBER enumeration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // intervals ::= LBRACKET NUMBER DOTDOT NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intervals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array ::= type STRINGCONTENT LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // case ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // case ::= CASE LPAR prop RPAR instructions case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // switchCase ::= SWITCH case END_SWITCH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchCase",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instructions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instructions ::= loop instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instructions ::= switchCase instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instructions ::= variable instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // loop ::= WHILE LPAR prop RPAR DO instructions OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable ::= type STRINGCONTENT EQ expr SEMIC 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= array SEMIC 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable ::= intervals SEMIC 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable ::= type STRINGCONTENT EQ LPAR enumeration RPAR SEMIC 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
			//RESULT = new NodeAllocation(var.toString(), MyEnumType.ALLOC, val, parser.tree); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable ::= type STRINGCONTENT EQ FALSE SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 			
			Tac myTac = new Tac(null, name , val, null);
			Tree.tac.add(myTac);
			RESULT = new NodeVariable(t, name, val); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable ::= type STRINGCONTENT EQ TRUE SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			Tac myTac = new Tac(null, name , val, null);
			Tree.tac.add(myTac);
			RESULT = new NodeVariable(t, name, val);
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable ::= STRINGCONTENT EQ STRINGCONTENT SEMIC 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			Tac myTac = new Tac(null, name , val, null);
			Tree.tac.add(myTac);
			RESULT = new NodeVariable(null, name, val); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= type STRINGCONTENT SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new NodeVariable(t, name, null); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable ::= type STRINGCONTENT EQ val SEMIC 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		MyEnumType t = (MyEnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			Tac myTac = new Tac(null, name, val, null);
			Tree.tac.add(myTac);
			RESULT = new NodeVariable(t, name, val); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= val expr 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			//RESULT = v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr PLUS expr 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //RESULT = new NodeArithmetic(MyEnumType.PLUS, e1, e2, parser.tree);
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // prop ::= FALSE 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prop ::= TRUE 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prop ::= NOT prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prop ::= LPAR prop RPAR 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prop ::= expr EQUAL_INF expr 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prop ::= prop EQUAL_INF prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prop ::= expr EQUAL_SUP expr 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prop ::= prop EQUAL_SUP prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prop ::= expr INF expr 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prop ::= prop INF prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prop ::= prop SUP prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // prop ::= expr SUP expr 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // prop ::= expr EQUAL_NOT expr 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prop ::= prop EQUAL_NOT prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prop ::= expr EQUAL expr 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prop ::= prop EQUAL prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prop ::= prop OR prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prop ::= prop AND prop 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // begin ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // begin ::= loop begin 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin ::= switchCase begin 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= variable begin 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = var;
			//RESULT = new NodeInstruction(var, b);
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begining ::= begin 
            {
              Tree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.tree.setNode(b);
		System.out.println(parser.tree.TacToString());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begining",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begining EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree start_val = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

