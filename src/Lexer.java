/* The following code was generated by JFlex 1.4.3 on 06/12/13 17:18 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/12/13 17:18 from the specification file
 * <tt>/autofs/netapp/travail/dchemina/compilation/projet/Compilation/lexer/lexer.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comments = 4;
  public static final int comment = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\70\26\0\1\11\1\27\3\0\1\12\1\0\1\24\1\25"+
    "\1\7\1\6\1\23\1\4\1\2\1\10\12\1\1\0\1\26\1\15"+
    "\1\14\1\16\2\0\1\61\1\40\1\50\1\63\1\3\1\20\1\5"+
    "\1\60\1\32\2\5\1\65\1\67\1\62\1\66\2\5\1\53\1\56"+
    "\1\17\1\42\1\5\1\57\3\5\1\21\1\0\1\22\1\0\1\64"+
    "\1\0\1\47\1\5\1\52\1\44\1\35\1\5\1\36\1\51\1\41"+
    "\2\5\1\46\1\55\1\33\1\45\2\5\1\37\1\43\1\34\1\54"+
    "\5\5\1\30\1\13\1\31\u05e2\0\12\1\206\0\12\1\u026c\0\12\1"+
    "\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1\167\0\11\1"+
    "\166\0\12\1\166\0\12\1\166\0\12\1\340\0\12\1\166\0\12\1"+
    "\106\0\12\1\u0116\0\12\1\u031f\0\11\1\u046e\0\12\1\46\0\12\1"+
    "\u012c\0\12\1\ue5c0\0\12\1\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\10\3\1\1\1\3\1\31\2\0"+
    "\1\32\2\3\1\33\1\34\1\35\1\36\1\37\12\3"+
    "\1\40\1\0\1\41\2\2\1\0\14\3\1\0\1\3"+
    "\1\0\5\3\1\42\1\43\3\3\1\0\1\3\1\0"+
    "\7\3\1\44\1\0\1\3\1\0\5\3\1\45\1\46"+
    "\1\0\1\3\1\0\1\47\1\3\1\50\2\3\1\0"+
    "\1\3\1\0\3\3\1\0\1\3\1\0\3\3\1\51"+
    "\1\0\1\3\1\52\1\53\2\3\1\0\1\54\2\3"+
    "\1\55\2\3\1\56\4\3\1\57\3\3\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\253\0\253\0\253\0\u0201\0\253\0\253\0\u023a"+
    "\0\u0273\0\u02ac\0\u01c8\0\u01c8\0\253\0\253\0\253\0\253"+
    "\0\253\0\253\0\253\0\253\0\253\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\253"+
    "\0\u051f\0\u0558\0\253\0\u0591\0\u05ca\0\253\0\253\0\253"+
    "\0\253\0\253\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720"+
    "\0\u0759\0\u0792\0\u07cb\0\u0804\0\u01c8\0\u083d\0\u01c8\0\u0876"+
    "\0\u08af\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u01c8\0\u01c8"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u01c8\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u01c8\0\u01c8"+
    "\0\u1209\0\u1242\0\u127b\0\u01c8\0\u12b4\0\u01c8\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u01c8\0\u160b\0\u1644\0\253"+
    "\0\u01c8\0\u167d\0\u16b6\0\u16ef\0\u01c8\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\253\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u01c8"+
    "\0\u1929\0\u1962\0\u199b\0\u01c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\5\11\1\37\1\11\1\40\5\11"+
    "\1\41\2\11\1\42\2\11\1\43\1\44\3\11\1\45"+
    "\1\46\1\11\1\47\1\11\71\4\1\50\25\4\1\50"+
    "\43\4\72\0\1\5\1\51\1\52\31\0\1\52\35\0"+
    "\1\53\67\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\1\11\1\54\26\11\1\55\1\11\1\0"+
    "\3\11\17\0\1\56\53\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\32\11\1\0\3\11\15\0"+
    "\1\57\70\0\1\60\70\0\1\61\70\0\1\62\55\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\1\11\1\63\30\11\1\0\3\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\11\0\2\11\11\0\7\11\1\64"+
    "\3\11\1\65\16\11\1\0\3\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\11\0\2\11\11\0\1\11\1\66"+
    "\30\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\17\11\1\67\7\11\1\70"+
    "\2\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\3\11\1\71\26\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\2\11\1\72\22\11\1\73\4\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\26\11\1\74\3\11\1\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\32\11\1\0\1\11\1\75\1\11\65\0\1\76\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\31\11\1\77\1\0\3\11\2\0\1\100\70\0\1\101"+
    "\2\0\1\102\1\0\1\102\63\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\22\11\1\103\7\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\31\11\1\104\1\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\2\11\1\105\27\11\1\0\3\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\11\0\2\11\11\0\4\11\1\106"+
    "\25\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\13\11\1\107\16\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\11\11\1\110\20\11\1\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\15\11\1\111\14\11\1\0\3\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\11\0\2\11\11\0\24\11\1\112"+
    "\5\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\15\11\1\113\14\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\5\11\1\114\24\11\1\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\1\115\31\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\1\116\31\11\1\0"+
    "\3\11\51\0\1\117\21\0\1\100\1\0\1\52\31\0"+
    "\1\52\34\0\1\101\70\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\23\11\1\120\6\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\32\11\1\121\3\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\11\0\2\11\11\0\3\11\1\122"+
    "\26\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\1\123\31\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\14\11\1\124\15\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\7\11"+
    "\1\125\22\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\5\11\1\126\24\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\127\1\0\1\11"+
    "\11\0\2\11\11\0\32\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\14\11"+
    "\1\130\15\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\7\11\1\131\22\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\1\132\1\11\11\0\32\11\1\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\32\11\1\0\1\133\2\11\67\0\1\134\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\3\11"+
    "\1\135\26\11\1\0\3\11\57\0\1\136\13\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\4\11"+
    "\1\137\25\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\1\11\1\140\30\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\3\11\1\141\26\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\4\11\1\142\25\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\15\11"+
    "\1\143\14\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\1\11\1\144\30\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\16\11\1\145\13\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\146\1\0\1\11\11\0\2\11"+
    "\11\0\32\11\1\0\3\11\70\0\1\147\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\5\11"+
    "\1\150\24\11\1\0\3\11\60\0\1\151\12\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\3\11"+
    "\1\152\26\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\2\11\1\153\27\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\15\11\1\154\14\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\1\11\1\155\30\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\20\11"+
    "\1\156\11\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\4\11\1\157\25\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\26\11\1\160\3\11\1\0\3\11"+
    "\70\0\1\161\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\15\11\1\162\14\11\1\0\3\11"+
    "\33\0\1\163\37\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\5\11\1\164\24\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\3\11\1\165\26\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\1\11"+
    "\1\166\30\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\3\11\1\167\26\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\2\11\1\170\27\11\1\0\3\11"+
    "\4\0\1\171\66\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\2\11\1\172\27\11\1\0\3\11"+
    "\20\0\1\173\52\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\4\11\1\174\25\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\12\11\1\175\17\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\3\11"+
    "\1\176\26\11\1\0\3\11\63\0\1\177\7\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\7\11"+
    "\1\200\22\11\1\0\3\11\51\0\1\201\21\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\3\11"+
    "\1\202\26\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\1\203\5\11\1\204"+
    "\23\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\5\11\1\205\24\11\1\0"+
    "\3\11\20\0\1\206\52\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\13\11\1\207\16\11\1\0"+
    "\3\11\61\0\1\210\11\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\5\11\1\211\24\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\1\11\1\212\30\11\1\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\7\11\1\213\22\11\1\0\3\11\65\0\1\214\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\2\11\11\0"+
    "\1\11\1\215\30\11\1\0\3\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\11\0\2\11\11\0\2\11\1\216"+
    "\27\11\1\0\3\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\4\11\1\217\25\11\1\0"+
    "\3\11\65\0\1\220\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\11\0\2\11\11\0\3\11\1\221\26\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\11\0\1\222\31\11\1\0\3\11\25\0\1\223"+
    "\45\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\4\11\1\224\25\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\1\11"+
    "\1\225\30\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\3\11\1\226\26\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\2\11\1\227\27\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\5\11\1\230\24\11\1\0\3\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\11\0\3\11"+
    "\1\231\26\11\1\0\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\11\0\2\11\11\0\4\11\1\232\25\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\2\11\11\0\3\11\1\233\26\11\1\0\3\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\0\2\11"+
    "\11\0\5\11\1\234\24\11\1\0\3\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6612];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\3\11\1\1\2\11\5\1\11\11"+
    "\12\1\1\11\2\0\1\11\2\1\5\11\13\1\1\0"+
    "\3\1\1\0\14\1\1\0\1\1\1\0\12\1\1\0"+
    "\1\1\1\0\10\1\1\0\1\1\1\0\7\1\1\0"+
    "\1\1\1\0\5\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\11\3\1\1\0"+
    "\6\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private Symbol Symbol(int type, Object value) {
	return new Symbol(type, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return new Symbol(MySymbol.LBRACE, yyline, yycolumn);
          }
        case 49: break;
        case 4: 
          { return new Symbol(MySymbol.MINUS, yyline, yycolumn);
          }
        case 50: break;
        case 33: 
          { return new Symbol(MySymbol.OD, yyline, yycolumn);
          }
        case 51: break;
        case 19: 
          { return new Symbol(MySymbol.LPAR, yyline, yycolumn);
          }
        case 52: break;
        case 22: 
          { return new Symbol(MySymbol.QUOTE, yyline, yycolumn);
          }
        case 53: break;
        case 28: 
          { return new Symbol(MySymbol.EQUAL_NOT, yyline, yycolumn);
          }
        case 54: break;
        case 29: 
          { return new Symbol(MySymbol.EQUAL, yyline, yycolumn);
          }
        case 55: break;
        case 16: 
          { return new Symbol(MySymbol.LBRACKET, yyline, yycolumn);
          }
        case 56: break;
        case 35: 
          { return new Symbol(MySymbol.REAL, yyline, yycolumn);
          }
        case 57: break;
        case 14: 
          { return new Symbol(MySymbol.TRUE, yyline, yycolumn, new String(yytext()));
          }
        case 58: break;
        case 42: 
          { return new Symbol(MySymbol.END_SWITCH, yyline, yycolumn);
          }
        case 59: break;
        case 43: 
          { return new Symbol(MySymbol.BIGINTEGER, yyline, yycolumn);
          }
        case 60: break;
        case 48: 
          { return new Symbol(MySymbol.UBIGINTEGER, yyline, yycolumn);
          }
        case 61: break;
        case 36: 
          { return new Symbol(MySymbol.WHILE, yyline, yycolumn);
          }
        case 62: break;
        case 30: 
          { return new Symbol(MySymbol.EQUAL_INF, yyline, yycolumn);
          }
        case 63: break;
        case 40: 
          { return new Symbol(MySymbol.BOOL, yyline, yycolumn);
          }
        case 64: break;
        case 31: 
          { return new Symbol(MySymbol.EQUAL_SUP, yyline, yycolumn);
          }
        case 65: break;
        case 24: 
          { return new Symbol(MySymbol.RBRACE, yyline, yycolumn);
          }
        case 66: break;
        case 18: 
          { return new Symbol(MySymbol.COMA, yyline, yycolumn);
          }
        case 67: break;
        case 6: 
          { return new Symbol(MySymbol.TIMES, yyline, yycolumn);
          }
        case 68: break;
        case 21: 
          { return new Symbol(MySymbol.SEMIC, yyline, yycolumn);
          }
        case 69: break;
        case 27: 
          { return new Symbol(MySymbol.ARROW, yyline, yycolumn);
          }
        case 70: break;
        case 32: 
          { return new Symbol(MySymbol.DO, yyline, yycolumn);
          }
        case 71: break;
        case 25: 
          { yybegin(YYINITIAL);
          }
        case 72: break;
        case 37: 
          { return new Symbol(MySymbol.STRING, yyline, yycolumn);
          }
        case 73: break;
        case 39: 
          { return new Symbol(MySymbol.INTEGER, yyline, yycolumn);
          }
        case 74: break;
        case 2: 
          { return new Symbol(MySymbol.NUMBER, yyline, yycolumn, new String(yytext()));
          }
        case 75: break;
        case 20: 
          { return new Symbol(MySymbol.RPAR, yyline, yycolumn);
          }
        case 76: break;
        case 11: 
          { return new Symbol(MySymbol.EQ, yyline, yycolumn);
          }
        case 77: break;
        case 15: 
          { return new Symbol(MySymbol.FALSE, yyline, yycolumn, new String(yytext()));
          }
        case 78: break;
        case 38: 
          { return new Symbol(MySymbol.SWITCH, yyline, yycolumn);
          }
        case 79: break;
        case 3: 
          { return new Symbol(MySymbol.STRINGCONTENT, yyline, yycolumn, new String(yytext()));
          }
        case 80: break;
        case 7: 
          { return new Symbol(MySymbol.DIVIDE, yyline, yycolumn);
          }
        case 81: break;
        case 10: 
          { return new Symbol(MySymbol.OR, yyline, yycolumn);
          }
        case 82: break;
        case 8: 
          { return new Symbol(MySymbol.NOT, yyline, yycolumn);
          }
        case 83: break;
        case 46: 
          { yybegin(comments);
          }
        case 84: break;
        case 9: 
          { return new Symbol(MySymbol.AND, yyline, yycolumn);
          }
        case 85: break;
        case 34: 
          { return new Symbol(MySymbol.CASE, yyline, yycolumn);
          }
        case 86: break;
        case 47: 
          { return new Symbol(MySymbol.UINTEGER, yyline, yycolumn);
          }
        case 87: break;
        case 41: 
          { return new Symbol(MySymbol.CHAR, yyline, yycolumn);
          }
        case 88: break;
        case 5: 
          { return new Symbol(MySymbol.PLUS, yyline, yycolumn);
          }
        case 89: break;
        case 45: 
          { yybegin(comment);
          }
        case 90: break;
        case 44: 
          { return new Symbol(MySymbol.ENUM, yyline, yycolumn);
          }
        case 91: break;
        case 12: 
          { return new Symbol(MySymbol.INF, yyline, yycolumn);
          }
        case 92: break;
        case 17: 
          { return new Symbol(MySymbol.RBRACKET, yyline, yycolumn);
          }
        case 93: break;
        case 13: 
          { return new Symbol(MySymbol.SUP, yyline, yycolumn);
          }
        case 94: break;
        case 26: 
          { return new Symbol(MySymbol.DOTDOT, yyline, yycolumn);
          }
        case 95: break;
        case 1: 
          { 
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(MySymbol.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
