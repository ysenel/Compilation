
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 21 17:02:34 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 21 17:02:34 CET 2013
  */
public class CalculetteParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalculetteParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\003\000" +
    "\002\016\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\003\000\002\004\007\000\002\004\005" +
    "\000\002\004\006\000\002\004\007\000\002\004\007\000" +
    "\002\004\011\000\002\004\004\000\002\004\004\000\002" +
    "\013\011\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\002\000\002\012\005\000\002\014\010" +
    "\000\002\014\002\000\002\010\007\000\002\007\007\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\003\003\000\002\003\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\036\002\ufffd\026\014\035\022\036\015\037" +
    "\011\040\027\041\021\042\006\043\025\044\020\046\016" +
    "\047\013\051\010\060\023\001\002\000\036\002\ufffd\026" +
    "\014\035\022\036\015\037\011\040\027\041\021\042\006" +
    "\043\025\044\020\046\016\047\013\051\010\060\023\001" +
    "\002\000\004\025\200\001\002\000\004\060\uffc7\001\002" +
    "\000\004\060\154\001\002\000\004\004\146\001\002\000" +
    "\004\060\uffca\001\002\000\004\025\145\001\002\000\006" +
    "\050\043\054\uffd4\001\002\000\004\057\036\001\002\000" +
    "\004\060\uffcb\001\002\000\004\060\uffc4\001\002\000\036" +
    "\002\ufffd\026\014\035\022\036\015\037\011\040\027\041" +
    "\021\042\006\043\025\044\020\046\016\047\013\051\010" +
    "\060\023\001\002\000\004\060\uffc5\001\002\000\004\060" +
    "\uffc8\001\002\000\004\060\uffcc\001\002\000\004\016\032" +
    "\001\002\000\004\002\031\001\002\000\004\060\uffc6\001" +
    "\002\000\036\002\ufffd\026\014\035\022\036\015\037\011" +
    "\040\027\041\021\042\006\043\025\044\020\046\016\047" +
    "\013\051\010\060\023\001\002\000\004\060\uffc9\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\060\033\001\002\000\004\025\034\001\002\000\044" +
    "\002\uffe1\026\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\053\uffe1\054\uffe1\060\uffe1\001\002\000\004\002" +
    "\000\001\002\000\004\030\037\001\002\000\004\057\040" +
    "\001\002\000\004\027\041\001\002\000\004\025\uffd2\001" +
    "\002\000\004\054\144\001\002\000\004\004\044\001\002" +
    "\000\020\004\052\007\045\013\056\055\051\056\053\057" +
    "\050\060\054\001\002\000\012\004\112\007\045\057\050" +
    "\060\054\001\002\000\024\005\132\014\061\015\066\017" +
    "\063\020\065\021\064\022\062\023\060\024\067\001\002" +
    "\000\034\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\001\002\000\036\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\001\002\000\024\005" +
    "\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\001\002\000\020\004\052\007\045\013" +
    "\056\055\051\056\053\057\050\060\054\001\002\000\024" +
    "\005\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\001\002\000\036\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\014\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\001\002" +
    "\000\026\006\103\007\100\010\107\011\101\017\102\020" +
    "\105\021\104\022\110\023\106\024\111\001\002\000\020" +
    "\004\052\007\045\013\056\055\051\056\053\057\050\060" +
    "\054\001\002\000\024\005\uffed\014\uffed\015\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\001\002\000" +
    "\020\004\052\007\045\013\056\055\051\056\053\057\050" +
    "\060\054\001\002\000\020\004\052\007\045\013\056\055" +
    "\051\056\053\057\050\060\054\001\002\000\020\004\052" +
    "\007\045\013\056\055\051\056\053\057\050\060\054\001" +
    "\002\000\020\004\052\007\045\013\056\055\051\056\053" +
    "\057\050\060\054\001\002\000\020\004\052\007\045\013" +
    "\056\055\051\056\053\057\050\060\054\001\002\000\020" +
    "\004\052\007\045\013\056\055\051\056\053\057\050\060" +
    "\054\001\002\000\020\004\052\007\045\013\056\055\051" +
    "\056\053\057\050\060\054\001\002\000\020\004\052\007" +
    "\045\013\056\055\051\056\053\057\050\060\054\001\002" +
    "\000\024\005\ufff5\014\061\015\066\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\001\002\000\024\005\ufffb" +
    "\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\001\002\000\024\005\ufff8\014\061\015\066" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\001" +
    "\002\000\024\005\ufff0\014\061\015\066\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\001\002\000\024\005" +
    "\ufffa\014\061\015\066\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\001\002\000\024\005\ufff2\014\061\015" +
    "\066\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\001\002\000\024\005\ufffc\014\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\001\002\000\024" +
    "\005\ufff4\014\061\015\066\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\001\002\000\012\004\112\007\045" +
    "\057\050\060\054\001\002\000\012\004\112\007\045\057" +
    "\050\060\054\001\002\000\012\004\112\007\045\057\050" +
    "\060\054\001\002\000\012\004\112\007\045\057\050\060" +
    "\054\001\002\000\012\004\112\007\045\057\050\060\054" +
    "\001\002\000\012\004\112\007\045\057\050\060\054\001" +
    "\002\000\012\004\112\007\045\057\050\060\054\001\002" +
    "\000\012\004\112\007\045\057\050\060\054\001\002\000" +
    "\012\004\112\007\045\057\050\060\054\001\002\000\012" +
    "\004\112\007\045\057\050\060\054\001\002\000\012\004" +
    "\112\007\045\057\050\060\054\001\002\000\034\005\ufff6" +
    "\006\103\007\100\010\107\011\101\014\ufff6\015\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\001\002" +
    "\000\014\005\115\006\103\007\100\010\107\011\101\001" +
    "\002\000\034\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\001\002\000\034\005\ufff1\006\103\007\100" +
    "\010\107\011\101\014\ufff1\015\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\001\002\000\034\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\001\002" +
    "\000\034\005\ufff3\006\103\007\100\010\107\011\101\014" +
    "\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\001\002\000\034\005\ufff7\006\103\007\100\010" +
    "\107\011\101\014\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\001\002\000\034\005\uffef\006" +
    "\103\007\100\010\107\011\101\014\uffef\015\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\001\002\000" +
    "\034\005\uffea\006\uffea\007\uffea\010\107\011\101\014\uffea" +
    "\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\001\002\000\034\005\ufff9\006\103\007\100\010\107" +
    "\011\101\014\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\001\002\000\034\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\014\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\001\002\000\034" +
    "\005\uffe9\006\uffe9\007\uffe9\010\107\011\101\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\001\002\000\024\005\131\014\061\015\066\017\063\020" +
    "\065\021\064\022\062\023\060\024\067\001\002\000\030" +
    "\005\115\006\103\007\100\010\107\011\101\017\102\020" +
    "\105\021\104\022\110\023\106\024\111\001\002\000\024" +
    "\005\uffee\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\001\002\000\040\026\014\035\022" +
    "\036\015\037\011\040\027\041\021\042\006\043\025\044" +
    "\020\046\016\047\013\050\uffd7\051\010\054\uffd7\060\023" +
    "\001\002\000\006\050\043\054\uffd4\001\002\000\042\026" +
    "\014\035\022\036\015\037\011\040\027\041\021\042\006" +
    "\043\025\044\020\046\016\047\013\050\uffd7\051\010\053" +
    "\uffd7\054\uffd7\060\023\001\002\000\042\026\014\035\022" +
    "\036\015\037\011\040\027\041\021\042\006\043\025\044" +
    "\020\046\016\047\013\050\uffd7\051\010\053\uffd7\054\uffd7" +
    "\060\023\001\002\000\042\026\014\035\022\036\015\037" +
    "\011\040\027\041\021\042\006\043\025\044\020\046\016" +
    "\047\013\050\uffd7\051\010\053\uffd7\054\uffd7\060\023\001" +
    "\002\000\010\050\uffd8\053\uffd8\054\uffd8\001\002\000\010" +
    "\050\uffda\053\uffda\054\uffda\001\002\000\010\050\uffd9\053" +
    "\uffd9\054\uffd9\001\002\000\004\054\uffd5\001\002\000\034" +
    "\005\uffe5\006\uffe5\007\uffe5\010\107\011\101\014\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\001\002\000\044\002\uffd6\026\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\060\uffd6\001" +
    "\002\000\044\002\uffdc\026\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\060\uffdc\001\002" +
    "\000\020\004\052\007\045\013\056\055\051\056\053\057" +
    "\050\060\054\001\002\000\024\005\150\014\061\015\066" +
    "\017\063\020\065\021\064\022\062\023\060\024\067\001" +
    "\002\000\004\052\151\001\002\000\036\026\014\035\022" +
    "\036\015\037\011\040\027\041\021\042\006\043\025\044" +
    "\020\046\016\047\013\051\010\053\uffd7\060\023\001\002" +
    "\000\004\053\153\001\002\000\044\002\uffdb\026\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\060\uffdb\001\002\000\010\016\155\025\156\026\157" +
    "\001\002\000\014\004\163\055\162\056\164\057\050\060" +
    "\054\001\002\000\044\002\uffe2\026\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\060\uffe2" +
    "\001\002\000\004\057\160\001\002\000\004\027\161\001" +
    "\002\000\004\025\uffd3\001\002\000\004\025\177\001\002" +
    "\000\010\005\uffcf\031\170\057\171\001\002\000\004\025" +
    "\167\001\002\000\004\025\166\001\002\000\044\002\uffe3" +
    "\026\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\053\uffe3\054\uffe3\060\uffe3\001\002\000\044\002\uffdf\026" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053" +
    "\uffdf\054\uffdf\060\uffdf\001\002\000\010\005\uffcf\031\170" +
    "\057\171\001\002\000\010\005\uffcf\031\170\057\171\001" +
    "\002\000\004\005\173\001\002\000\004\025\174\001\002" +
    "\000\044\002\uffde\026\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\053\uffde\054\uffde\060\uffde\001\002\000" +
    "\004\005\uffd1\001\002\000\004\005\uffd0\001\002\000\044" +
    "\002\uffe0\026\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\053\uffe0\054\uffe0\060\uffe0\001\002\000\044\002" +
    "\uffdd\026\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\053\uffdd\054\uffdd\060\uffdd\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\020\002\006\004\016\005\023\007\004\010" +
    "\011\012\003\013\025\001\001\000\020\002\006\004\016" +
    "\005\200\007\004\010\011\012\003\013\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\006\004\016\005\034\007\004\010" +
    "\011\012\003\013\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\006\004\016\005\027" +
    "\007\004\010\011\012\003\013\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\046\015\054\016\045\001\001\000\006\003\046\015\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\046\015\127\016\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\046\015\054\016\056\001\001\000\002" +
    "\001\001\000\010\003\046\015\054\016\076\001\001\000" +
    "\010\003\046\015\054\016\075\001\001\000\010\003\046" +
    "\015\054\016\074\001\001\000\010\003\046\015\054\016" +
    "\073\001\001\000\010\003\046\015\054\016\072\001\001" +
    "\000\010\003\046\015\054\016\071\001\001\000\010\003" +
    "\046\015\054\016\070\001\001\000\010\003\046\015\054" +
    "\016\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\046\015\125\001\001\000\006\003\046\015\124\001\001" +
    "\000\006\003\046\015\123\001\001\000\006\003\046\015" +
    "\122\001\001\000\006\003\046\015\121\001\001\000\006" +
    "\003\046\015\120\001\001\000\006\003\046\015\117\001" +
    "\001\000\006\003\046\015\116\001\001\000\006\003\046" +
    "\015\115\001\001\000\006\003\046\015\112\001\001\000" +
    "\006\003\046\015\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\006\004\134\007\004\010\011\011" +
    "\132\012\133\013\135\001\001\000\004\014\141\001\001" +
    "\000\020\002\006\004\134\007\004\010\011\011\140\012" +
    "\133\013\135\001\001\000\020\002\006\004\134\007\004" +
    "\010\011\011\137\012\133\013\135\001\001\000\020\002" +
    "\006\004\134\007\004\010\011\011\136\012\133\013\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\046\015\054\016\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\006" +
    "\004\134\007\004\010\011\011\151\012\133\013\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\175" +
    "\001\001\000\004\006\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculetteParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculetteParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculetteParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(String message, Object o, int line, int column){
	String msg2 = new StringBuilder().append("ligne : ").append(line+1).append(",").append(column)
					.append(",\t erreur : ").append(message)
					.append("\n\t-> symbole : ").append(o).toString();
	report_error(msg2, null) ;
}
public void syntax_error(String message, Object o){
	String msg2 = new StringBuilder().append("objet : ").append(o).append(" ->\t ").append(message).toString();
	report_error(msg2, null) ;
}
public void unrecovered_syntax_error(Symbol cur_token, String message){
	try{
		report_fatal_error(message, null) ;
	}catch (Exception e){
		
	}
}
public void unrecovered_syntax_error(Symbol cur_token){
	try{
		report_fatal_error("Erreur fatale", null) ;
	}catch (Exception e){
		
	}
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculetteParser$actions {
  private final CalculetteParser parser;

  /** Constructor */
  CUP$CalculetteParser$actions(CalculetteParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculetteParser$do_action(
    int                        CUP$CalculetteParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculetteParser$parser,
    java.util.Stack            CUP$CalculetteParser$stack,
    int                        CUP$CalculetteParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculetteParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculetteParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= ENUM 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= REAL 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= UBIGINTEGER 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= UINTEGER 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= BIGINTEGER 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // val ::= STRINGCONTENT 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("val",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // val ::= NUMBER 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("val",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // enumeration ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("enumeration",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // enumeration ::= COMA enumeration 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("enumeration",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // enumeration ::= NUMBER enumeration 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("enumeration",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // intervals ::= LBRACKET NUMBER DOTDOT NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("intervals",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array ::= type STRINGCONTENT LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // case ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("case",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // case ::= CASE LPAR prop RPAR instructions case 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("case",10, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // switchCase ::= SWITCH case END_SWITCH 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("switchCase",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instructions ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instructions ::= loop instructions 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instructions ::= switchCase instructions 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instructions ::= variable instructions 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // loop ::= WHILE LPAR prop RPAR DO instructions OD 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("loop",9, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= array SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= intervals SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable ::= type STRINGCONTENT EQ LPAR enumeration RPAR SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable ::= type STRINGCONTENT EQ FALSE SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= type STRINGCONTENT EQ TRUE SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable ::= STRINGCONTENT EQ STRINGCONTENT SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable ::= type STRINGCONTENT SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable ::= type STRINGCONTENT EQ val SEMIC 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= val 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= MINUS expr 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= LPAR expr RPAR 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr DIVIDE expr 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr TIMES expr 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MINUS expr 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr PLUS expr 
            {
              Float RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prop ::= FALSE 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prop ::= TRUE 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prop ::= NOT prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prop ::= LPAR prop RPAR 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prop ::= expr EQUAL_INF expr 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prop ::= prop EQUAL_INF prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prop ::= expr EQUAL_SUP expr 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prop ::= prop EQUAL_SUP prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prop ::= expr INF expr 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prop ::= prop INF prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // prop ::= prop SUP prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // prop ::= expr SUP expr 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prop ::= expr EQUAL_NOT expr 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prop ::= prop EQUAL_NOT prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prop ::= expr EQUAL expr 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prop ::= prop EQUAL prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prop ::= prop OR prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prop ::= prop AND prop 
            {
              Boolean RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",12, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // begin ::= 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("begin",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin ::= loop begin 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("begin",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= switchCase begin 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("begin",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= variable begin 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("begin",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculetteParser$parser.done_parsing();
          return CUP$CalculetteParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

