
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 09 17:55:19 CEST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 09 17:55:19 CEST 2013
  */
public class CalculetteParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalculetteParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\003" +
    "\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\020\003\013\004\010\007\004\013\015\027" +
    "\007\030\016\031\006\001\002\000\010\004\057\007\004" +
    "\031\006\001\002\000\030\014\021\015\031\016\024\017" +
    "\027\020\022\021\026\022\023\023\030\024\025\025\032" +
    "\026\103\001\002\000\042\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\001" +
    "\002\000\032\005\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\001\002\000\016\004\010\007\004\013\015\027\007" +
    "\030\016\031\006\001\002\000\022\002\076\003\013\004" +
    "\010\007\004\013\015\027\007\030\016\031\006\001\002" +
    "\000\022\002\uffff\003\uffff\004\uffff\007\uffff\013\uffff\027" +
    "\uffff\030\uffff\031\uffff\001\002\000\004\026\075\001\002" +
    "\000\030\006\050\007\045\010\054\011\046\020\047\021" +
    "\052\022\051\023\055\024\053\025\056\026\074\001\002" +
    "\000\016\004\010\007\004\013\015\027\007\030\016\031" +
    "\006\001\002\000\032\005\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\001\002\000\026\006\050\007\045\010\054" +
    "\011\046\020\047\021\052\022\051\023\055\024\053\025" +
    "\056\001\002\000\032\005\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\001\002\000\016\004\010\007\004\013\015" +
    "\027\007\030\016\031\006\001\002\000\016\004\010\007" +
    "\004\013\015\027\007\030\016\031\006\001\002\000\016" +
    "\004\010\007\004\013\015\027\007\030\016\031\006\001" +
    "\002\000\016\004\010\007\004\013\015\027\007\030\016" +
    "\031\006\001\002\000\016\004\010\007\004\013\015\027" +
    "\007\030\016\031\006\001\002\000\016\004\010\007\004" +
    "\013\015\027\007\030\016\031\006\001\002\000\016\004" +
    "\010\007\004\013\015\027\007\030\016\031\006\001\002" +
    "\000\016\004\010\007\004\013\015\027\007\030\016\031" +
    "\006\001\002\000\016\004\010\007\004\013\015\027\007" +
    "\030\016\031\006\001\002\000\016\004\010\007\004\013" +
    "\015\027\007\030\016\031\006\001\002\000\032\005\uffec" +
    "\014\021\015\031\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\001\002\000\032" +
    "\005\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\001\002" +
    "\000\032\005\uffe8\014\021\015\031\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\001\002\000\032\005\ufff1\014\021\015\031\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\001\002\000\032\005\uffee\014\021\015\031\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\001\002\000\032\005\uffea\014\021\015" +
    "\031\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\001\002\000\032\005\ufff2\014" +
    "\021\015\031\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\001\002\000\032\005" +
    "\uffe6\014\021\015\031\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\001\002\000" +
    "\032\005\ufff0\014\021\015\031\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\001" +
    "\002\000\032\005\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\001\002\000\010\004\057\007\004\031\006\001\002" +
    "\000\010\004\057\007\004\031\006\001\002\000\010\004" +
    "\057\007\004\031\006\001\002\000\010\004\057\007\004" +
    "\031\006\001\002\000\010\004\057\007\004\031\006\001" +
    "\002\000\010\004\057\007\004\031\006\001\002\000\010" +
    "\004\057\007\004\031\006\001\002\000\010\004\057\007" +
    "\004\031\006\001\002\000\010\004\057\007\004\031\006" +
    "\001\002\000\010\004\057\007\004\031\006\001\002\000" +
    "\010\004\057\007\004\031\006\001\002\000\042\005\uffeb" +
    "\006\050\007\045\010\054\011\046\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\001\002\000\014\005\062\006\050\007" +
    "\045\010\054\011\046\001\002\000\042\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\001\002\000\042\005\uffe7\006\050\007\045\010" +
    "\054\011\046\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\001" +
    "\002\000\042\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\001\002\000\042" +
    "\005\uffe9\006\050\007\045\010\054\011\046\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\001\002\000\042\005\uffed\006" +
    "\050\007\045\010\054\011\046\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\001\002\000\042\005\uffe5\006\050\007\045" +
    "\010\054\011\046\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\001\002\000\042\005\ufffb\006\ufffb\007\ufffb\010\054\011" +
    "\046\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\001\002\000" +
    "\042\005\uffef\006\050\007\045\010\054\011\046\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\001\002\000\042\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\001\002\000\042\005\ufffa\006\ufffa\007" +
    "\ufffa\010\054\011\046\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\001\002\000\022\002\ufffe\003\ufffe\004\ufffe\007\ufffe" +
    "\013\ufffe\027\ufffe\030\ufffe\031\ufffe\001\002\000\022\002" +
    "\ufffc\003\ufffc\004\ufffc\007\ufffc\013\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\001\002\000\004\002\001\001\002\000\022\002" +
    "\000\003\000\004\000\007\000\013\000\027\000\030\000" +
    "\031\000\001\002\000\030\005\062\006\050\007\045\010" +
    "\054\011\046\020\047\021\052\022\051\023\055\024\053" +
    "\025\056\001\002\000\030\005\102\014\021\015\031\016" +
    "\024\017\027\020\022\021\026\022\023\023\030\024\025" +
    "\025\032\001\002\000\032\005\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\001\002\000\022\002\ufffd\003\ufffd\004" +
    "\ufffd\007\ufffd\013\ufffd\027\ufffd\030\ufffd\031\ufffd\001\002" +
    "\000\042\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\012\002\010\003\011\004\013\005\004\001" +
    "\001\000\004\004\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\077\005\100\001" +
    "\001\000\010\003\076\004\013\005\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\016\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\016\005\043\001\001\000" +
    "\006\004\016\005\042\001\001\000\006\004\016\005\041" +
    "\001\001\000\006\004\016\005\040\001\001\000\006\004" +
    "\016\005\037\001\001\000\006\004\016\005\036\001\001" +
    "\000\006\004\016\005\035\001\001\000\006\004\016\005" +
    "\034\001\001\000\006\004\016\005\033\001\001\000\006" +
    "\004\016\005\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\072\001\001" +
    "\000\004\004\071\001\001\000\004\004\070\001\001\000" +
    "\004\004\067\001\001\000\004\004\066\001\001\000\004" +
    "\004\065\001\001\000\004\004\064\001\001\000\004\004" +
    "\063\001\001\000\004\004\062\001\001\000\004\004\057" +
    "\001\001\000\004\004\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculetteParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculetteParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculetteParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(String message, Object o, int line, int column){
	String msg2 = new StringBuilder().append("ligne : ").append(line+1).append(",").append(column)
					.append(",\t erreur : ").append(message)
					.append("\n\t-> symbole : ").append(o).toString();
	report_error(msg2, null) ;
}
public void syntax_error(String message, Object o){
	String msg2 = new StringBuilder().append("objet : ").append(o).append(" ->\t ").append(message).toString();
	report_error(msg2, null) ;
}
public void unrecovered_syntax_error(Symbol cur_token, String message){
	try{
		report_fatal_error(message, null) ;
	}catch (Exception e){
		
	}
}
public void unrecovered_syntax_error(Symbol cur_token){
	try{
		report_fatal_error("Erreur fatale", null) ;
	}catch (Exception e){
		
	}
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculetteParser$actions {
  private final CalculetteParser parser;

  /** Constructor */
  CUP$CalculetteParser$actions(CalculetteParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculetteParser$do_action(
    int                        CUP$CalculetteParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculetteParser$parser,
    java.util.Stack            CUP$CalculetteParser$stack,
    int                        CUP$CalculetteParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculetteParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculetteParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prop ::= F 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prop ::= T 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prop ::= NOT prop 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = !p; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prop ::= LPAR prop RPAR 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 RESULT = p; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // prop ::= expr EQUAL_INF expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = (LogicRules.equal(e1, e2) | LogicRules.sup(e2, e1)); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // prop ::= prop EQUAL_INF prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = (LogicRules.equal(p1, p2) | LogicRules.sup(p2, p1)); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // prop ::= expr EQUAL_SUP expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = (LogicRules.equal(e1, e2) | LogicRules.sup(e1, e2)); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // prop ::= prop EQUAL_SUP prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = (LogicRules.equal(p1, p2) | LogicRules.sup(p1, p2)); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // prop ::= expr INF expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.sup(e2, e1); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // prop ::= prop INF prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.sup(p2, p1); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prop ::= expr SUP expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.sup(e1, e2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prop ::= prop SUP prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.sup(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prop ::= expr EQUAL_NOT expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = !LogicRules.equal(e1, e2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prop ::= prop EQUAL_NOT prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = !LogicRules.equal(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prop ::= expr EQUAL expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.equal(e1, e2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prop ::= prop EQUAL prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.equal(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prop ::= prop EQUI prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.equi(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prop ::= prop IMPLY prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.imply(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prop ::= prop OR prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.or(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prop ::= prop AND prop 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Boolean p2 = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = LogicRules.and(p1, p2); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= NUMBER 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = n; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= MINUS expr 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = -e; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= LPAR expr RPAR 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 RESULT = e; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr DIVIDE expr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr TIMES expr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= error SEMIC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 parser.syntax_error("expression incorrecte", e,  eleft, eright ); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= prop SEMIC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 System.out.println("statement is " + p); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= expr SEMIC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 System.out.println(e); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculetteParser$parser.done_parsing();
          return CUP$CalculetteParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

