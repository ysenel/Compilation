import java_cup.runtime.*;
import java.lang.Number;
import java.util.Vector;
import java.io.*;
import java.util.*;

parser code {:

public void syntax_error(String message, Object o, int line, int column){
	String msg2 = new StringBuilder().append("ligne : ").append(line+1).append(",").append(column)
					.append(",\t erreur : ").append(message)
					.append("\n\t-> symbole : ").append(o).toString();
	report_error(msg2, null) ;
}
public void syntax_error(String message, Object o){
	String msg2 = new StringBuilder().append("objet : ").append(o).append(" ->\t ").append(message).toString();
	report_error(msg2, null) ;
}
public void unrecovered_syntax_error(Symbol cur_token, String message){
	try{
		report_fatal_error(message, null) ;
	}catch (Exception e){
		
	}
}
public void unrecovered_syntax_error(Symbol cur_token){
	try{
		report_fatal_error("Erreur fatale", null) ;
	}catch (Exception e){
		
	}
}

public Tree tree = new Tree();
public ArrayList<Node> arrayWhile = new ArrayList<Node>();

:}


terminal LPAR, RPAR, PLUS, MINUS, TIMES, DIVIDE, MINUS_U;
terminal NOT, AND, OR;
terminal EQ, EQUAL, EQUAL_NOT, EQUAL_INF, EQUAL_SUP, INF, SUP;
terminal SEMIC;
terminal LBRACKET, RBRACKET, DOTDOT, COMA, QUOTE, LBRACE, RBRACE;
terminal INTEGER, BIGINTEGER, UINTEGER, UBIGINTEGER, BOOL, CHAR, REAL, ENUM;
terminal ARROW, STRING;
terminal SWITCH, CASE, WHILE, DO, OD, END_SWITCH;
terminal String TRUE;
terminal String FALSE ;
terminal String NUMBER;
terminal String STRINGCONTENT;

non terminal Node begin, variable, val, expr, loop, switchCase;
non terminal Tree begining;
non terminal ArrayList<Node> instructions;
non terminal enumeration, intervals, array, case;
non terminal Node prop;
non terminal MyEnumType type;

precedence left PLUS, MINUS, EQUAL, EQUAL_NOT, EQUAL_INF, EQUAL_SUP, SUP, INF;
precedence left TIMES, DIVIDE, AND, OR;
precedence left MINUS_U, NOT;

start with begining;

begining ::=
	begin:b 
		{:
		System.out.println(parser.tree.TacToString());
		:}
	;

begin ::=
	variable:var begin
		{: Tree.node.add(var); :}
	|switchCase:s begin
		{: Tree.node.add(s); :}
	|loop:l begin
		{: Tree.node.add(l); :}
	|
	;

prop ::=
	prop:p1 AND prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.AND, p1, p2); :}
	|prop:p1 OR prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.OR, p1, p2); :}
	|prop:p1 EQUAL prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL, p1, p2); :}
	|expr:e1 EQUAL expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL, e1, e2); :}
	|prop:p1 EQUAL_NOT prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL_NOT, p1, p2); :}
	|expr:e1 EQUAL_NOT expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL_NOT, e1, e2); :}
	|expr:e1 SUP expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.SUP, e1, e2); :}
	|prop:p1 SUP prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.SUP, p1, p2); :}
	|prop:p1 INF prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.INF, p1, p2); :}
	|expr:e1 INF expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.INF, e1, e2); :}
	|prop:p1 EQUAL_SUP prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL_SUP, p1, p2); :}
	|expr:e1 EQUAL_SUP expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL_SUP, e1, e2); :}
	|prop:p1 EQUAL_INF prop:p2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL_INF, p1, p2); :}
	|expr:e1 EQUAL_INF expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.EQUAL_INF, e1, e2); :}
	|LPAR prop:p RPAR {: RESULT = p; :}
	|NOT prop:p {: RESULT = new NodeArithmetic(MyEnumType.NOT, p, null); :}
	|TRUE:t {:RESULT = new NodeConstant(t.toString(), null);:}
	|FALSE:f {:RESULT = new NodeConstant(f.toString(), null);:}
	;

expr ::=
    expr:e1 PLUS expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.PLUS, e1, e2); :}
	|expr:e1 MINUS expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.MINUS, e1, e2); :}   
    |expr:e1 TIMES expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.TIMES, e1, e2); :}
	|expr:e1 DIVIDE expr:e2 {: RESULT = new NodeArithmetic(MyEnumType.DIVIDE, e1, e2); :}    
    //|LPAR expr:e RPAR {: :}    
    |MINUS expr:e {: :} %prec MINUS_U 
	|val:v {: RESULT = v; :}
    ;

variable ::= 
	type:t STRINGCONTENT:name EQ expr:val SEMIC
		{: 
			RESULT = new NodeVariable(t, name, val.getValue(), val);
		:}
	|type:t STRINGCONTENT:name SEMIC
		{:
			RESULT = new NodeVariable(t, name, null, null); 
		:}
	|STRINGCONTENT:name EQ STRINGCONTENT:val SEMIC
		{: 	
			RESULT = new NodeVariable(null, name, val, null); 
		:}
	|STRINGCONTENT:name EQ NUMBER:val SEMIC
		{: 	
			RESULT = new NodeVariable(null, name, val, null); 
		:}
	|type:t STRINGCONTENT:name EQ TRUE:val SEMIC
		{: 
			RESULT = new NodeVariable(t, name, val, null);
	    :}
	|type:t STRINGCONTENT:name EQ FALSE:val SEMIC
		{: 			
			RESULT = new NodeVariable(t, name, val, null); 
		:}
	|type STRINGCONTENT:var EQ LPAR enumeration:val RPAR SEMIC
		{: 
			//RESULT = new NodeAllocation(var.toString(), MyEnumType.ALLOC, val, parser.tree); 
		:}
	|intervals SEMIC
	|array SEMIC
	;


loop ::=
        {: parser.arrayWhile = new ArrayList<Node>(); :}
	WHILE LPAR prop:p RPAR DO instructions OD
		{:
			//
			RESULT = new NodeWhile(p, parser.arrayWhile);
		:}
	;

instructions ::=
	variable:v instructions
		{: parser.arrayWhile.add(v); :}
	|switchCase instructions
	|loop instructions
	|
	;

switchCase ::= 
	SWITCH case END_SWITCH
	;

case ::=
	CASE LPAR prop RPAR instructions case
	|
	;


array ::=
	type STRINGCONTENT LBRACKET NUMBER RBRACKET
	;

intervals ::=
	LBRACKET NUMBER DOTDOT NUMBER RBRACKET
	;

enumeration ::=
	NUMBER enumeration
	|COMA enumeration
	|
	;

val ::=
	NUMBER:val1		{: RESULT = new NodeConstant(val1, null); :}
	|STRINGCONTENT:val2		{: RESULT = new NodeConstant(val2, null); :}
	;

type ::=
	INTEGER		{: RESULT = MyEnumType.INTEGER; :}
	|BIGINTEGER		{: RESULT = MyEnumType.BIGINTEGER; :}
	|UINTEGER		{: RESULT = MyEnumType.UINTEGER; :}
	|UBIGINTEGER		{: RESULT = MyEnumType.UBIGINTEGER; :}
	|BOOL		{: RESULT = MyEnumType.BOOLEAN; :}
	|CHAR		{: RESULT = MyEnumType.CHARACTER; :}
	|REAL		{: RESULT = MyEnumType.REAL; :}
	|ENUM		{: RESULT = MyEnumType.ENUM; :}
	|STRING		{: RESULT = MyEnumType.STRING; :}
	;
