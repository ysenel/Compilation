// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import java.lang.Number;
import java.util.Vector;
import java.io.*;

parser code {:

public void syntax_error(String message, Object o, int line, int column){
	String msg2 = new StringBuilder().append("ligne : ").append(line+1).append(",").append(column)
					.append(",\t erreur : ").append(message)
					.append("\n\t-> symbole : ").append(o).toString();
	report_error(msg2, null) ;
}
public void syntax_error(String message, Object o){
	String msg2 = new StringBuilder().append("objet : ").append(o).append(" ->\t ").append(message).toString();
	report_error(msg2, null) ;
}
public void unrecovered_syntax_error(Symbol cur_token, String message){
	try{
		report_fatal_error(message, null) ;
	}catch (Exception e){
		
	}
}
public void unrecovered_syntax_error(Symbol cur_token){
	try{
		report_fatal_error("Erreur fatale", null) ;
	}catch (Exception e){
		
	}
}

:}


terminal LPAR, RPAR, PLUS, MINUS, TIMES, DIVIDE, MINUS_U;
terminal NOT, AND, OR;
terminal EQ, EQUAL, EQUAL_NOT, EQUAL_INF, EQUAL_SUP, INF, SUP;
terminal SEMIC;
terminal LBRACKET, RBRACKET, DOTDOT, COMA, QUOTE, LBRACE, RBRACE;
terminal INTEGER, BIGINTEGER, UINTEGER, UBIGINTEGER, BOOL, CHAR, REAL, ENUM;
terminal ARROW, STRING;
terminal SWITCH, CASE, WHILE, DO, OD, END_SWITCH;
terminal TRUE, FALSE ;
terminal NUMBER, STRINGCONTENT;
non terminal type, val, variable, begin, enumeration, intervals, array, instructions, switchCase, loop, case;
non terminal Float expr;
non terminal Boolean prop;

precedence left PLUS, MINUS, EQUAL, EQUAL_NOT, EQUAL_INF, EQUAL_SUP, SUP, INF;
precedence left TIMES, DIVIDE, AND, OR;
precedence left MINUS_U, NOT;

//old start (calculator)
start with begin;

begin ::=
	variable begin
	|switchCase begin
	|loop begin
	|
	;

//=======================================================
// variables
//=======================================================


prop ::=
	prop AND prop
	|prop OR prop
	|prop EQUAL prop
	|expr EQUAL expr
	|prop EQUAL_NOT prop
	|expr EQUAL_NOT expr
	|expr SUP expr
	|prop SUP prop
	|prop INF prop
	|expr INF expr
	|prop EQUAL_SUP prop
	|expr EQUAL_SUP expr
	|prop EQUAL_INF prop
	|expr EQUAL_INF expr
    |LPAR prop RPAR 
	|NOT prop
	|TRUE
	|FALSE
	;


expr ::=
    expr PLUS expr   
	|expr MINUS expr     
    |expr TIMES expr     
    |expr DIVIDE expr 
    |LPAR expr RPAR
    |MINUS expr 
	|val
    ;


variable ::= 
	type STRINGCONTENT EQ val SEMIC
	|type STRINGCONTENT SEMIC
	|STRINGCONTENT EQ STRINGCONTENT SEMIC
	|type STRINGCONTENT EQ TRUE SEMIC
	|type STRINGCONTENT EQ FALSE SEMIC
	|type STRINGCONTENT EQ LPAR enumeration RPAR SEMIC
	|intervals SEMIC
	|array SEMIC
	;

loop ::= 
	WHILE LPAR prop RPAR DO instructions OD
	;

instructions ::=
	variable instructions
	|switchCase instructions
	|loop instructions
	|
	;


switchCase ::= 
	SWITCH case END_SWITCH
	;

case ::=
	CASE LPAR prop RPAR instructions case
	|
	;


array ::=
	type STRINGCONTENT LBRACKET NUMBER RBRACKET
	;

intervals ::=
	LBRACKET NUMBER DOTDOT NUMBER RBRACKET
	;

enumeration ::=
	NUMBER enumeration
	|COMA enumeration
	|
	;

val ::=
	NUMBER
	|STRINGCONTENT
	;

type ::=
//simples
	INTEGER
	|BIGINTEGER
	|UINTEGER
	|UBIGINTEGER
	|BOOL
	|CHAR
	|REAL
	|ENUM
//complex
	|STRING
	;
